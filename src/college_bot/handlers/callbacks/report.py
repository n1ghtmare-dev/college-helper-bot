from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from states import ReportStates
from aiogram.fsm.context import FSMContext
from datetime import datetime
from utils.report_utils import calculate_percentage
from keyboards.inline import get_confirmation_kb
from utils.json_handler.data_manager import JsonDataManager
from config import settings
from aiogram import Bot


router = Router()
json_manager = JsonDataManager(settings.DB_CONFIG)


@router.callback_query(F.data == 'create_report')
async def create_report(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)

    await state.set_state(ReportStates.waiting_room)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏:")

@router.message(StateFilter(ReportStates.waiting_room))
async def process_room(message: Message, state: FSMContext):
    await state.update_data(room=message.text)
    await state.set_state(ReportStates.waiting_teacher)
    await message.answer("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç? (–î–∞/–ù–µ—Ç)")

@router.message(StateFilter(ReportStates.waiting_teacher))
async def process_teacher(message: Message, state: FSMContext):
    if message.text.lower() not in ["–¥–∞", "–Ω–µ—Ç"]:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'")
    
    await state.update_data(teacher_present=message.text.lower() == "–¥–∞")
    await state.set_state(ReportStates.waiting_students)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ –ø–∞—Ä–µ?")

@router.message(StateFilter(ReportStates.waiting_students))
async def process_students(message: Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    
    await state.update_data(students_count=int(message.text))
    await state.set_state(ReportStates.waiting_photo)
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∞—É–¥–∏—Ç–æ—Ä–∏–∏")

@router.message(StateFilter(ReportStates.waiting_photo), F.photo)
async def process_photo(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    data = await state.get_data()
    
    report_text = (
        f"üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        f"üö™ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {data['room']}\n"
        f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {'–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' if data['teacher_present'] else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
        f"üë• –°—Ç—É–¥–µ–Ω—Ç–æ–≤: {data['students_count']}\n"
        f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è: {calculate_percentage(data['students_count'])}%"
    )
    
    await state.update_data(
        photo_id=photo_id,
        report_text=report_text
    )
    
    await message.answer_photo(
        photo_id,
        caption=report_text,
        reply_markup=get_confirmation_kb()
    )
    await state.set_state(ReportStates.confirmation)

@router.callback_query(StateFilter(ReportStates.confirmation), F.data == "edit_report")
async def edit_report(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await state.set_state(ReportStates.waiting_room)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏:")

@router.callback_query(StateFilter(ReportStates.confirmation), F.data == "submit_report")
async def submit_report(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    
    report_data = {
        "–î–∞—Ç–∞": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "user id": callback.from_user.id,
        "–ò–º—è": callback.from_user.full_name,
        "–ö–∞–±–∏–Ω–µ—Ç": data['room'],
        "–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è": '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' if data['teacher_present'] else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤": data['students_count'],
    }

    report_text = (
        f"üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        f"üö™ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {data['room']}\n"
        f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {'–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' if data['teacher_present'] else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
        f"üë• –°—Ç—É–¥–µ–Ω—Ç–æ–≤: {data['students_count']}\n"
        f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è: {calculate_percentage(data['students_count'])}%"
    )

    await json_manager.save_report_and_photo(bot, data['photo_id'], report_data)

    await bot.send_photo(
            chat_id=settings.TELEGRAM_GROUP,
            photo=data['photo_id'],
            caption=report_text,
            parse_mode="Markdown"
        )

    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.answer("–û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", show_alert=True)
    await state.clear()
